#Thu Feb 16 02:37:16 CET 2012
cmdhistory=["(hello)" ";; Loading file src/test.clj" "(j 1)" ";; Loading file src/test.clj" "(j 2)" ";; Loading file src/test.clj" "(j 2)" ";; Loading file src/test.clj" "(hello)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" "(hello)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" "(hello)" ";; Switching to test namespace" "(hello)" ";; Switching to test namespace" "(hello)" ";; Switching to test namespace" "(j 2)" ";; Switching to test namespace" "(j 1)" ";; Switching to test namespace" ";; Loading file src/test.clj" ";; Switching to test namespace" "(j 1)\\n" ";; Loading file src/test.clj" ";; Switching to test namespace" "(j 1)" ";; Loading file src/test.clj" ";; Switching to test namespace" "(j 2)" ";; Switching to test namespace" "(j 1)" ";; Loading file src/test.clj" ";; Switching to test namespace" "(j 1)" ";; Switching to test namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(j 1)" ";; Loading file src/test.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Loading file src/test.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Loading file src/test.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(j 1)" "(j 2)" ";; Loading file src/test.clj" ";; Switching to test namespace" "(j 1)" ";; Loading file src/test.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Loading file src/test.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(j 1)" "(j 2)" ";; Loading file src/test.clj" ";; Switching to test namespace" "(j 1)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(j 1)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(j 1)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(j 1)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(j 1)" "(j 2)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(j-n1 1)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(j 1)" "(j 2)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(j 2)" "(j 4)" ";; Loading file src/test.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(j 2)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(r-rt-avrg 4)" "(rt 5)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(r 4)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(r 5)" ";; Loading file src/test.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(r 5)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Loading file src/test.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" ";; Loading file src/test.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(r 5)" ";; Loading file src/test.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" ";; Loading file src/test.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" "(jt-n1 5)" ";; Loading file src/test.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" ";; Switching to test namespace" ";; Loading file src/test.clj" "(human-print-abs-diffs 2 j r jt rt j-name r-name jt-name rt-name)" "(human-print-abs-diffs 2 j r jt rt *j-name* *r-name* *jt-name* *rt-name*)" ";; Loading file src/test.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test)))" "(foo 5)" ";; Loading file src/turing.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'turing)))" ";; Loading file src/turing.clj" ";; Loading file src/relationshipFunc.clj" ";; Loading file src/turing.clj" "(machine-print-general 2 j jt *j-name* *r-name* *jt-name* *rt-name* j-jt-diff)" ";; Loading file src/turing.clj" "(g *jt-name*)" ";; Loading file src/turing.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'turing)))" ";; Switching to turing namespace" "(g 4 *jt-name*)" ";; Loading file src/turing.clj" "(g 4 j *jt-name*)" ";; Loading file src/turing.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'turing)))" ";; Switching to turing namespace" "(g 4 j *jt-name*)" ";; Loading file src/turing.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'turing)))" ";; Switching to turing namespace" "(g 1 j jt *j-name* *r-name* *jt-name* *rt-name* 'j-jt-diff)" "(g 1 j jt *j-name* *r-name* *jt-name* *rt-name* j-jt-diff)" ";; Loading file src/turing.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'turing)))" ";; Switching to turing namespace" "(machine-print-general 4 j jt *j-name* *r-name* *jt-name* *rt-name* j-jt-diff)" ";; Loading file src/turing.clj" ";; Switching to turing namespace" "( machine-print-all 3)" ";; Loading file src/turing.clj" ";; Loading file src/test.clj" ";; Loading file src/turing.clj" "(machine-print-abs-diffs 3 r j rt jt)" ";; Loading file src/turing.clj" "(machine-print-abs-diffs 3 r j rt jt)\\n" ";; Loading file src/turing.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'turing)))" ";; Switching to turing namespace" "(machine-print-abs-diffs 3 r j rt jt)\\n" "(machine-print-abs-diffs 3 r j rt jt)" ";; Loading file src/turing.clj" "(machine-print-abs-diffs 3 r j rt jt)" ";; Loading file src/turing.clj" "(d 3)" "(machine-print-all 3)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'turing)))" "(d 3)" ";; Loading file src/turing.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'turing)))" ";; Switching to turing namespace" ";; Loading file src/turing.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'turing)))" ";; Switching to turing namespace" "(machine-print-abs-diffs 3 r j rt jt)" ";; Loading file src/turing.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'turing)))" ";; Switching to turing namespace" "(machine-print-all 3)" ";; Loading file src/turing.clj" ";; Switching to turing namespace" "(machine-print-all 4)" "(foo 5)" ";; Loading file src/test.clj" ";; Switching to turing namespace" "(foo 5)" "(re-seq \#\\"[A-Z]+\\" \\"bA1B3Ce \\")\\n" "(apply str (re-seq \#\\"[A-Z]+\\" \\"bA1B3Ce \\"))" "(\= (max 1 8 3 4) 8)" "(\= (max 30 20) 30)" "(\= (max 45 67 11) 67)" "(conj '(3 4) 2 1)" "(re-seq \#\\"[A-Z]+\\" \\"HeLlO, WoRlD\!\\")" "(apply str (re-seq \#\\"[A-Z]+\\" \\"HeLlO, WoRlD\!\\"))" " (apply str re-seq \#\\"[A-Z]+\\" \\"HeLlO, WoRlD\!\\")" "(re-seq \#\\"[A-Z]\\" \\"HeLlO, WoRlD\!\\")" "(def [x]\\n  (apply str (re-seq \#\\"[A-Z]+\\" x))" " (def [x]\\n     (apply str (re-seq \#\\"[A-Z]+\\" x)))" "(def [x]\\n  apply str (re-seq \#\\"[A-Z]+\\" x))" "(def go [x]\\n     (apply str (re-seq \#\\"[A-Z]+\\" x)))" "(def go[x]\\n     (apply str (re-seq \#\\"[A-Z]+\\" x)))" "(defn [x]\\n     (apply str (re-seq \#\\"[A-Z]+\\" x)))" "(defn go [x]\\n     (apply str (re-seq \#\\"[A-Z]+\\" x)))" "(\= (print re-seq \#\\"[A-Z]+\\" \\"HeLlO, WoRlD\!\\") \\"HLOWRD\\")" "(\= (str re-seq \#\\"[A-Z]+\\" \\"HeLlO, WoRlD\!\\") \\"HLOWRD\\")" "(str re-seq \#\\"[A-Z]+\\" \\"HeLlO, WoRlD\!\\")" "(str (re-seq \#\\"[A-Z]+\\" \\"HeLlO, WoRlD\!\\"))" "(str (re-seq \#\\"[A-Z]\\" \\"HeLlO, WoRlD\!\\"))" "(some \#{2 7 6} [5 6 7 8])" "(some \#(when (even? %) %) [5 6 7 8])" "(\#(when (even? %) %) [5 6 7 8])" "(even? [5 6 7 8])" "(\= 6 (some \#(when (even? %) %) [5 6 7 8]))" "(some \#(when (even? %) %) [5 6 7 8])" "even? 4" "(even? 3)" "(even? 4)" "(when 5)" "(when (even? 2) 2)" "(when (even? 3) 2)\\n" "(\= true ((apply >) 7 8))" "(\= true ((is?\\n           >) 7 8))" "(count % (list 1 2 3 4 5))" "(\#(count %)(list 1 2 3 4 5))" "(\#(dec(count %)) (list 1 2 3 4 5))" "(\= (\#(dec (count %)) [\\"a\\" \\"b\\" \\"c\\"]) \\"b\\")" "(\#(count %) [\\"a\\" \\"b\\" \\"c\\"])" "(\#(nth (count %)) [\\"a\\" \\"b\\" \\"c\\"])" "(\#(nth % (count %)) [\\"a\\" \\"b\\" \\"c\\"])" "(nth \#(count %) [\\"a\\" \\"b\\" \\"c\\"])" "(nth 3 [1 2 3])" "(nth 1 [\\"a\\" \\"b\\" \\"c\\"])" "(nth [\\"a\\" \\"b\\" \\"c\\"] 1)" "(\#(nth % (dec (count %)) [\\"a\\" \\"b\\" \\"c\\"]))" "(\#(nth % (dec (count %))) [\\"a\\" \\"b\\" \\"c\\"])" "(\#(nth % (- (count %) 2)) [\\"a\\" \\"b\\" \\"c\\"])" "(odd? \#{1 2 3 4 5})" "(odd \#{1 2 3 4 5})" "((some \#(even? %)) \#{1 2 3 4 5})" "(some \#(when (even? %) %) \#{1 2 3 4})" "(some \#(when (odd? %) %) \#{1 2 3 4 5})" "(* 99 9)" "(reg-exp \\"\\\\d\\" (* 99 9))" "(re-seq \\"\\\\d\\" (* 99 9))" "(re-seq \#\\"\\\\d\\" (* 99 9))" "(re-seq \\"\\\\d\\" \\"891\\")" "(re-seq \#\\"\\\\d\\" \\"891\\")" "(re-seq \#\\"\\\\d\\" 891)" "(re-seq \#\\".\\" 891)" "(re-seq \#\\".\\" \\"891\\")" "(list \\"891\\")" "(list \#(re-seq \#\\"\\\\d\\" %) \\"891\\")" "(\#(list (re-seq \#\\"\\\\d\\" %)) \\"891\\")" "(\#(list (re-seq \#\\"\\\\d\\" %)) 891)" "(\#(coll (re-seq \#\\"\\\\d\\" %)) \\"891\\")" "(\#(seq (re-seq \#\\"\\\\d\\" %)) \\"891\\")" "(\#(set (re-seq \#\\"\\\\d\\" %)) \\"891\\")" "(\#(sequence (re-seq \#\\"\\\\d\\" %)) \\"891\\")" "(\#(vec (re-seq \#\\"\\\\d\\" %)) \\"891\\")" "(\#(vec (re-seq \#\\"\\\\d\\" %)) 891)" "(\#(map read-string (vec (re-seq \#\\"\\\\d\\" %))) 891\\")" "(\#(vec (re-seq \#\\"\\\\d\\" %)) \\"891\\")" "(map read-string \#(vec (re-seq \#\\"\\\\d\\" %)) \\"891\\")" "(\#(map read-string) \#(vec (re-seq \#\\"\\\\d\\" %)) \\"891\\")" "(map read-string [\\"1\\" \\"2\\"])" "(read-string [\\"1\\" \\"2\\"])" "(map [\\"1\\" \\"2\\"])" "((fn double [x] (* 2 x)) 2)" "((defn double [x] (* 2 x)) 2)" "((defn aaa [x] (* 2 x)) 2)" "(+ 1 1_" "(+ 1 1)" "(.random Math)" "(java.lang.Math/random)" "(java.lang.Math/ceil(* (java.lang.Math/random) 100))" "(str randomNum \\" aaa\\")" "((str randomNum) \\" aaa\\")" "(concat (str randomNum) \\" aaa\\")" "(str 1 \\" aaa\\")" "(\\"prefix \\" str 1 \\" postfix\\")" "(\\"prefix \\" (str 1) \\" postfix\\")" "(apply str \\"prefix \\" 1 \\" postfix\\")" "((java.lang.Double. 1.23).intValue)" "((java.lang.Double. 1.23))" "(java.lang.Double. 1.23)" "(.intValue (java.lang.Double. 1.23))" "(cons 1 2)" "(apply str \\"clj-random\: \\" (java.lang.Double. 1.23))" "(apply str [\\"clj-random\: \\" (java.lang.Double. 1.23)])"]
eclipse.preferences.version=1
